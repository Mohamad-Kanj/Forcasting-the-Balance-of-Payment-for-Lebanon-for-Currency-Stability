A. Financial Account Prediction for 2023

I. Arima for Financial Account

library(fpp2)
library(urca)
financial=read.csv('C:/Users/student/Desktop/BDL.csv')
values <- ts(financial$Net, frequency=12, start=c(2002,1),end=c(2021,12))

# Split the time series into training and test sets
datatrain <- window(values, start = c(2002, 1), end = c(2020, 12))
datatest <- window(values, start = c(2021, 1))

# check if my data is stationary
datatrain %>% ur.kpss() %>% summary()

# add a constant to make all values positive
# const <- abs(min(values)) + 0.1
# values_pos <- datatrain + const

# apply Box-Cox transformation
lambda <- BoxCox.lambda(datatrain)
values_bc <- BoxCox(datatrain, lambda)

ndiffs(values_bc)
values_bc %>% diff() %>% ggtsdisplay(main="")

auto.arima(values_bc, seasonal=FALSE, stepwise=FALSE, approximation=FALSE)



# this is the model that we chose it has the lowest AIC (1,1,4)
ARMA1 <- arima(values_bc, order=c(1,1,4))
print(ARMA1)

# Others we tried
# ARMA1 <- arima(values_bc, order=c(1,1,2))
# ARMA1 <- arima(values_bc, order=c(1,1,4))
# ARMA1 <- arima(values_bc, order=c(2,1,4))
# ARMA1 <- arima(values_bc, order=c(2,1,3))

checkresiduals(ARMA1) 

# Forcasting
library(forecast)
forecast_ARMA1 <- forecast(ARMA1, h=12)

# ploting
autoplot(datatrain) +
  autolayer(forecast_ARMA1, series="Forecast") +
  
  autolayer(datatest, series="Real")





II. Exponential Smoothing for the Financial Account

library(fpp2)
library(urca)
install.packages("forecast")
library(forecast)

financial=read.csv('C:/Users/student/Desktop/BDL.csv')
values <- ts(financial$Net, frequency=12, start=c(2002,1),end=c(2021,12))

# Split the time series into training and test sets
datatrain <- window(values, start = c(2002, 1), end = c(2020, 12))
datatest <- window(values, start = c(2021, 1))

# Train using holt
fcast1 <- holt(datatrain, h=12)
autoplot(datatrain) +
  autolayer(fcast1, series="Forecast") +
  autolayer(datatest, series="Real")+
  ylab("Financial Account (Millions of $)") + xlab("Months")

## Accuracy 
round(accuracy(fcast1),2)

# Train using ses
fcast2 <- ses(datatrain, h=12)
autoplot(datatrain) +
  autolayer(fcast2, series="Forecast") +
  autolayer(datatest, series="Real")+
  ylab("Financial Account (Millions of $)") + xlab("Months")

## Accuracy 
round(accuracy(fcast2),2)


# Train using Damped trend method
fcast3 <- holt(datatrain, damped = TRUE,phi = 0.9, h=12)
autoplot(datatrain) +
  autolayer(fcast3, series="Forecast") +
  autolayer(datatest, series="Real")+
  ylab("Financial Account (Millions of $)") + xlab("Months")

# Train using Damped trend method and plot the fitted with predicted
fcast3 <- holt(datatrain, damped = TRUE,phi = 0.9, h=12)
autoplot(fcast3) +
  autolayer(fitted(fcast3), series="Fitted") +
  autolayer(datatest, series="Real")+
  ylab("Financial Account (Millions of $)") + xlab("Months")

## Accuracy 
round(accuracy(fcast3),2)



B. Financial Account Prediction for 2019+
I. Arima for Financial Account
library(fpp2)
library(urca)
financial=read.csv('C:/Users/student/Desktop/BDL.csv')
values <- ts(financial$Net, frequency=12, start=c(2002,1),end=c(2018,12))

# Split data train and test
datatrain = window(values, start = c(2002,1), end = c(2017,12)) 
datatest = window(values, start = c(2018,1), end = c(2018,12))

# check if my data is stationary
datatrain %>% ur.kpss() %>% summary()

# add a constant to make all values positive
# const <- abs(min(values)) + 0.1
# values_pos <- datatrain + const

# apply Box-Cox transformation
lambda <- BoxCox.lambda(datatrain)
values_bc <- BoxCox(datatrain, lambda)

ndiffs(values_bc)
values_bc %>% diff() %>% ggtsdisplay(main="")

auto.arima(values_bc, seasonal=FALSE, stepwise=FALSE, approximation=FALSE)



# this is the model that we chose it has the lowest AIC (4,1,4)
ARMA1 <- arima(values_bc, order=c(4,1,4) )
print(ARMA1)

checkresiduals(ARMA1) 

# Forcasting
library(forecast)
forecast_ARMA1 <- forecast(ARMA1, h=12)

# ploting
autoplot(datatrain) +
  autolayer(forecast_ARMA1, series="Forecast") +
  
  autolayer(datatest, series="Real")





II. Exponential Smoothing for the Financial Account

library(fpp2)
library(urca)
install.packages("forecast")
library(forecast)

financial=read.csv('C:/Users/student/Desktop/BDL.csv')
values <- ts(financial$Net, frequency=12, start=c(2002,1),end=c(2018,12))

# Split the time series into training and test sets
datatrain <- window(values, start = c(2002, 1), end = c(2017, 12))
datatest <- window(values, start = c(2018, 1))


# Train using holt
fcast1 <- holt(datatrain, h=12)
autoplot(datatrain) +
  autolayer(fcast1, series="Forecast") +
  autolayer(datatest, series="Real")+
  ylab("Financial Account (Millions of $)") + xlab("Months")

## Accuracy 
round(accuracy(fcast1),2)

# Train using ses
fcast2 <- ses(datatrain, h=12)
autoplot(datatrain) +
  autolayer(fcast2, series="Forecast") +
  autolayer(datatest, series="Real")+
  ylab("Financial Account (Millions of $)") + xlab("Months")

## Accuracy 
round(accuracy(fcast2),2)


# Train using Damped trend method
fcast3 <- holt(datatrain, damped = TRUE,phi = 0.9, h=12)
autoplot(datatrain) +
  autolayer(fcast3, series="Forecast") +
  autolayer(datatest, series="Real")+
  ylab("Financial Account (Millions of $)") + xlab("Months")

# Train using Damped trend method and plot the fitted with predicted
fcast3 <- holt(datatrain, damped = TRUE,phi = 0.9, h=12)
autoplot(fcast3) +
  autolayer(fitted(fcast3), series="Fitted") +
  autolayer(datatest, series="Real")+
  ylab("Financial Account (Millions of $)") + xlab("Months")

## Accuracy 
round(accuracy(fcast3),2)
